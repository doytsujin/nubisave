/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package nubisave.ui.wizard;

import java.awt.Checkbox;
import java.awt.Dialog;
import java.awt.GridLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import nubisave.Nubisave;
import nubisave.ui.CustomServiceDlg;
import nubisave.ui.util.StringUtil;
import org.ini4j.Ini;

/**
 *
 * @author joe
 */
public class LoadProfileDlg extends javax.swing.JDialog {
    protected final String profilesDirectory;
    protected List<Checkbox> checkboxes = new ArrayList<Checkbox>();
    protected Object selectCustomProfile = "Select Custom Profile";
    protected File[] mountscripts = null;
    
    public LoadProfileDlg() {
        initComponents();
        selectedProfilePanel.setLayout(new GridLayout(0,1)); 
        profilesDirectory = Nubisave.properties.getProperty("splitter_profile_directory");
        File profileDir = new File(profilesDirectory);
        System.out.println(profileDir);
        File[] profiles = profileDir.listFiles();
        System.out.println(profiles);
        for (File folder : profiles) {
            profileChooserDd.addItem(folder.getName());
        }
        profileChooserDd.addItem(selectCustomProfile);
	this.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
    }
    
    public String getModuleName(File file) {
        String modulename = null;
        try {
            Ini ini = new Ini(file);
            modulename = ini.get("module", "name"); // parse the ini file to get the name
            if (modulename == null) {
                return file.getName().split("\\.")[0];
            } else {
                return modulename;
            }
        } catch (IOException ex) {
            Logger.getLogger(CustomServiceDlg.class.getName()).log(Level.SEVERE, null, ex);
        }
        return file.getName().split("\\.")[0];
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectedProfilePanel = new javax.swing.JPanel();
        profileChooserDd = new javax.swing.JComboBox();
        profileSelectionLb = new javax.swing.JLabel();
        profileDescriptionTitleLb = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        profileDescriptionTa = new javax.swing.JTextArea();
        applyBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout selectedProfilePanelLayout = new javax.swing.GroupLayout(selectedProfilePanel);
        selectedProfilePanel.setLayout(selectedProfilePanelLayout);
        selectedProfilePanelLayout.setHorizontalGroup(
            selectedProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 169, Short.MAX_VALUE)
        );
        selectedProfilePanelLayout.setVerticalGroup(
            selectedProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        profileChooserDd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileChooserDdActionPerformed(evt);
            }
        });

        profileSelectionLb.setText("Profile selection:");

        profileDescriptionTitleLb.setText("Profile description:");

        profileDescriptionTa.setColumns(20);
        profileDescriptionTa.setRows(5);
        jScrollPane1.setViewportView(profileDescriptionTa);

        applyBtn.setText("Apply");
        applyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(profileSelectionLb)
                            .addComponent(profileChooserDd, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(profileDescriptionTitleLb)
                            .addComponent(selectedProfilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(applyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(profileSelectionLb)
                .addGap(18, 18, 18)
                .addComponent(profileChooserDd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(profileDescriptionTitleLb)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(selectedProfilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyBtn)
                    .addComponent(cancelBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void profileChooserDdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileChooserDdActionPerformed
        JComboBox dd = (JComboBox)evt.getSource();
        String selectedProfile = (String)dd.getSelectedItem();
        
        if(selectedProfile.equals(selectCustomProfile)){
            selectedProfile = selectCustomProfile();
            if(selectedProfile == null){
                return;
            }
        } else {
            selectedProfile = profilesDirectory + "/" + (String)dd.getSelectedItem();
        }
        String profileDesc = StringUtil.readFile(selectedProfile+"/profile_description.txt");
        if(profileDesc == null) {
            profileDesc = "No description available.";
        }
        profileDescriptionTa.setText(profileDesc);
        File profileDir = new File(selectedProfile);
        mountscripts = profileDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".ini");
            }
        });
        for(Checkbox cb: checkboxes){
            selectedProfilePanel.remove(cb);
        }
        Checkbox cb;
        String moduleName = null;
        for (File file : mountscripts) {
            moduleName = getModuleName(file);
            cb = new Checkbox(moduleName);
            checkboxes.add(cb);
            selectedProfilePanel.add(cb);
        }
        pack();
    }//GEN-LAST:event_profileChooserDdActionPerformed

    private void applyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyBtnActionPerformed
        dispose();
    }//GEN-LAST:event_applyBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoadProfileDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoadProfileDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoadProfileDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoadProfileDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoadProfileDlg().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox profileChooserDd;
    private javax.swing.JTextArea profileDescriptionTa;
    private javax.swing.JLabel profileDescriptionTitleLb;
    private javax.swing.JLabel profileSelectionLb;
    private javax.swing.JPanel selectedProfilePanel;
    // End of variables declaration//GEN-END:variables

    private String selectCustomProfile() {
        JFileChooser customStorageserviceChooser = new javax.swing.JFileChooser();
        customStorageserviceChooser.setCurrentDirectory(new java.io.File(nubisave.Nubisave.mainSplitter.getMountScriptDir()));
        customStorageserviceChooser.setDialogTitle("Custom Service");
        customStorageserviceChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = customStorageserviceChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = customStorageserviceChooser.getSelectedFile();
            return file.getAbsolutePath();
        }
        return null;
    }
    
    /**
     * 
     * @return The selected service descriptor files from the profile.
     */
    public ArrayList<File> getServiceDescriptors() {
        ArrayList<File> ret = new ArrayList<File>();
        for(Checkbox cb: checkboxes){
                String moduleName = cb.getLabel();
            if(cb.getState()){
                for(File serviceDescriptor: mountscripts){
                    if(moduleName.equals(getModuleName(serviceDescriptor))){
                        ret.add(serviceDescriptor);
                    }
                }
            }
        }
        return ret;
    }
}
