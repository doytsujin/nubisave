/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddServiceDialog.java
 *
 * Created on Jul 1, 2011, 1:44:20 AM
 */
package nubisave.ui;

import java.util.List;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.table.DefaultTableModel;
import nubisave.*;
import nubisave.request.Searcher;

/**
 * Dialog to search a service and add it as another backend storage service.
 * @author demo
 */
public class AddServiceDialog extends javax.swing.JDialog {

    private Searcher searcher;
    private List<MatchmakerService> services;
    private List<MatchmakerService> selectedservices = new ArrayList<MatchmakerService>();

    /** Creates new form AddServiceDialog */
    public AddServiceDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        searcher = new Searcher();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pricePerDataCheckBox = new javax.swing.JCheckBox();
        pricePerDataTextField = new javax.swing.JFormattedTextField();
        downTimeUnitCB = new javax.swing.JComboBox();
        pricePerDataWeightCB = new javax.swing.JComboBox();
        pricePerPeriodCheckBox = new javax.swing.JCheckBox();
        availabilityCheckBox = new javax.swing.JCheckBox();
        downTimeTextField = new javax.swing.JFormattedTextField();
        pricePerPeriodTextField = new javax.swing.JFormattedTextField();
        throughputCheckBox = new javax.swing.JCheckBox();
        downTimeCheckBox = new javax.swing.JCheckBox();
        responseTimeCheckBox = new javax.swing.JCheckBox();
        availabilityTextField = new javax.swing.JFormattedTextField();
        throughputTextField = new javax.swing.JFormattedTextField();
        responseTimeTextField = new javax.swing.JFormattedTextField();
        signupPrivacyLabel = new javax.swing.JLabel();
        throughputUnitCB = new javax.swing.JComboBox();
        responseTimeUnitCB = new javax.swing.JComboBox();
        throughputWeightCB = new javax.swing.JComboBox();
        downTimeWeightCB = new javax.swing.JComboBox();
        responseTimeWeightCB = new javax.swing.JComboBox();
        availabilityWeightCB = new javax.swing.JComboBox();
        pricePerPeriodWeightCB = new javax.swing.JComboBox();
        searchBtn = new javax.swing.JButton();
        pricePerDataUnitCB = new javax.swing.JComboBox();
        signupPrivacyCheckBox = new javax.swing.JCheckBox();
        capacityCheckBox = new javax.swing.JCheckBox();
        redundancyCheckBox = new javax.swing.JCheckBox();
        encryptionCheckBox = new javax.swing.JCheckBox();
        cancelBtn = new javax.swing.JToggleButton();
        signupPrivacyTextField = new javax.swing.JFormattedTextField();
        capacityTextField = new javax.swing.JFormattedTextField();
        redundancyTextField = new javax.swing.JFormattedTextField();
        encryptionTextField = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchResultTable = new javax.swing.JTable();
        addBtn = new javax.swing.JToggleButton();
        availabilityLabel = new javax.swing.JLabel();
        signupPrivacyWeightCB = new javax.swing.JComboBox();
        capacityWeightCB = new javax.swing.JComboBox();
        capacityUnitCB = new javax.swing.JComboBox();
        redundancyLabel = new javax.swing.JLabel();
        encryptionLabel = new javax.swing.JLabel();
        redundancyWeightCB = new javax.swing.JComboBox();
        encryptionWeightCB = new javax.swing.JComboBox();
        propertyLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        unitLabel = new javax.swing.JLabel();
        priorityLabel = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Storage Service Selection");
        setPreferredSize(new java.awt.Dimension(510, 520));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        getContentPane().setLayout(layout);

        pricePerDataCheckBox.setText("Price per Data/GB");
        pricePerDataCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pricePerDataCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(pricePerDataCheckBox, gridBagConstraints);

        pricePerDataTextField.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(pricePerDataTextField, gridBagConstraints);

        downTimeUnitCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hour", "Minute", "Second", "MilliSecond" }));
        downTimeUnitCB.setSelectedIndex(1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(downTimeUnitCB, gridBagConstraints);

        pricePerDataWeightCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Low", "Medium", "High" }));
        pricePerDataWeightCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pricePerDataWeightCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        getContentPane().add(pricePerDataWeightCB, gridBagConstraints);

        pricePerPeriodCheckBox.setText("Price per Period/Month");
        pricePerPeriodCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pricePerPeriodCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(pricePerPeriodCheckBox, gridBagConstraints);

        availabilityCheckBox.setText("Availability");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(availabilityCheckBox, gridBagConstraints);

        downTimeTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        downTimeTextField.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(downTimeTextField, gridBagConstraints);

        pricePerPeriodTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        pricePerPeriodTextField.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(pricePerPeriodTextField, gridBagConstraints);

        throughputCheckBox.setText("Throughput");
        throughputCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throughputCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(throughputCheckBox, gridBagConstraints);

        downTimeCheckBox.setText("Downtime");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(downTimeCheckBox, gridBagConstraints);

        responseTimeCheckBox.setText("Response Time");
        responseTimeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                responseTimeCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(responseTimeCheckBox, gridBagConstraints);

        availabilityTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        availabilityTextField.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(availabilityTextField, gridBagConstraints);

        throughputTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        throughputTextField.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(throughputTextField, gridBagConstraints);

        responseTimeTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        responseTimeTextField.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(responseTimeTextField, gridBagConstraints);

        signupPrivacyLabel.setText("%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(signupPrivacyLabel, gridBagConstraints);

        throughputUnitCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gbps", "Mbps", "Kbps" }));
        throughputUnitCB.setSelectedIndex(1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(throughputUnitCB, gridBagConstraints);

        responseTimeUnitCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hour", "Minute", "Second", "MilliSecond" }));
        responseTimeUnitCB.setSelectedIndex(2);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(responseTimeUnitCB, gridBagConstraints);

        throughputWeightCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Low", "Medium", "High" }));
        throughputWeightCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throughputWeightCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 8;
        getContentPane().add(throughputWeightCB, gridBagConstraints);

        downTimeWeightCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Low", "Medium", "High" }));
        downTimeWeightCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downTimeWeightCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 12;
        getContentPane().add(downTimeWeightCB, gridBagConstraints);

        responseTimeWeightCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Low", "Medium", "High" }));
        responseTimeWeightCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                responseTimeWeightCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 14;
        getContentPane().add(responseTimeWeightCB, gridBagConstraints);

        availabilityWeightCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Low", "Medium", "High" }));
        availabilityWeightCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availabilityWeightCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 10;
        getContentPane().add(availabilityWeightCB, gridBagConstraints);

        pricePerPeriodWeightCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Low", "Medium", "High" }));
        pricePerPeriodWeightCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pricePerPeriodWeightCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 6;
        getContentPane().add(pricePerPeriodWeightCB, gridBagConstraints);

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(searchBtn, gridBagConstraints);

        pricePerDataUnitCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Euro", "USDollar", "BritishPound", "Real" }));
        pricePerDataUnitCB.setEnabled(false);
        pricePerDataUnitCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pricePerDataUnitCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(pricePerDataUnitCB, gridBagConstraints);

        signupPrivacyCheckBox.setText("Signup Privacy");
        signupPrivacyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupPrivacyCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(signupPrivacyCheckBox, gridBagConstraints);

        capacityCheckBox.setText("Capacity");
        capacityCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capacityCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(capacityCheckBox, gridBagConstraints);

        redundancyCheckBox.setText("Redundancy");
        redundancyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redundancyCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(redundancyCheckBox, gridBagConstraints);

        encryptionCheckBox.setText("Encryption");
        encryptionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptionCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(encryptionCheckBox, gridBagConstraints);

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 28;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(cancelBtn, gridBagConstraints);

        signupPrivacyTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        signupPrivacyTextField.setText("0.00");
        signupPrivacyTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupPrivacyTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(signupPrivacyTextField, gridBagConstraints);

        capacityTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        capacityTextField.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(capacityTextField, gridBagConstraints);

        redundancyTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        redundancyTextField.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(redundancyTextField, gridBagConstraints);

        encryptionTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        encryptionTextField.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(encryptionTextField, gridBagConstraints);

        searchResultTable.setAutoCreateRowSorter(true);
        searchResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Pr/GB", "Pr/Mo", "Av", "Th", "Dt", "Rt", "SP", "Ca", "Re", "En"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        searchResultTable.setMinimumSize(new java.awt.Dimension(0, 0));
        searchResultTable.setPreferredSize(new java.awt.Dimension(0, 0));
        searchResultTable.setRowHeight(20);
        searchResultTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(searchResultTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.5;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        addBtn.setText("Add selected services");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 28;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(addBtn, gridBagConstraints);

        availabilityLabel.setText("%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(availabilityLabel, gridBagConstraints);

        signupPrivacyWeightCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Low", "Medium", "High" }));
        signupPrivacyWeightCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupPrivacyWeightCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 16;
        getContentPane().add(signupPrivacyWeightCB, gridBagConstraints);

        capacityWeightCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Low", "Medium", "High" }));
        capacityWeightCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capacityWeightCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 18;
        getContentPane().add(capacityWeightCB, gridBagConstraints);

        capacityUnitCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TB", "GB", "MB" }));
        capacityUnitCB.setSelectedIndex(1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(capacityUnitCB, gridBagConstraints);

        redundancyLabel.setText("%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(redundancyLabel, gridBagConstraints);

        encryptionLabel.setText("0/1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(encryptionLabel, gridBagConstraints);

        redundancyWeightCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Low", "Medium", "High" }));
        redundancyWeightCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redundancyWeightCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 20;
        getContentPane().add(redundancyWeightCB, gridBagConstraints);

        encryptionWeightCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Low", "Medium", "High" }));
        encryptionWeightCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptionWeightCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 22;
        getContentPane().add(encryptionWeightCB, gridBagConstraints);

        propertyLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        propertyLabel.setText("Property");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        getContentPane().add(propertyLabel, gridBagConstraints);

        valueLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        valueLabel.setText("Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        getContentPane().add(valueLabel, gridBagConstraints);

        unitLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        unitLabel.setText("Unit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        getContentPane().add(unitLabel, gridBagConstraints);

        priorityLabel.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        priorityLabel.setText("Priority");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        getContentPane().add(priorityLabel, gridBagConstraints);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Euro", "USDollar", "BritishPound", "Real" }));
        jComboBox1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jComboBox1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showServices() {
        DefaultTableModel tm = (DefaultTableModel) searchResultTable.getModel();
        for (int i = tm.getRowCount() - 1; i >= 0; i--) {
            tm.removeRow(i);
        }
        tm.fireTableDataChanged();

        if (services == null) {
            return;
        }
        
        for (MatchmakerService s : services) {
            Object[] row = {
                s.getName(),
                s.isSatPricePerData(),
                s.isSatPricePerMonth(),
                s.isSatAvailability(),
                s.isSatNetworkBandwith(),
                s.isSatMaxDownTime(),
                s.isSatResponseTime()};
            tm.addRow(row);
        }
        tm.fireTableDataChanged();
    }

    public void setServices(List<MatchmakerService> services) {
        this.services = services;
        showServices();
    }

    public JCheckBox getAvailabilityCheckBox() {
        return availabilityCheckBox;
    }

    public JFormattedTextField getAvailabilityTextField() {
        return availabilityTextField;
    }

    public JComboBox getAvailabilityWeightCB() {
        return availabilityWeightCB;
    }

    public JCheckBox getBandwidthCheckBox() {
        return throughputCheckBox;
    }

    public JFormattedTextField getBandwidthTextField() {
        return throughputTextField;
    }

    public JComboBox getBandwidthUnitCB() {
        return throughputUnitCB;
    }

    public JComboBox getBandwidthWeightCB() {
        return throughputWeightCB;
    }

    public JCheckBox getMaxDownTimeCheckBox() {
        return downTimeCheckBox;
    }

    public JFormattedTextField getMaxDownTimeTextField() {
        return downTimeTextField;
    }

    public JComboBox getMaxDownTimeUnitCB() {
        return downTimeUnitCB;
    }

    public JComboBox getMaxDownTimeWeightCB() {
        return downTimeWeightCB;
    }

    public JCheckBox getPricePerDataCheckBox() {
        return pricePerDataCheckBox;
    }

    public JFormattedTextField getPricePerDataTextField() {
        return pricePerDataTextField;
    }

    public JComboBox getPricePerDataWeightCB() {
        return encryptionWeightCB;
    }

    public JCheckBox getPricePerMonthCheckBox() {
        return pricePerPeriodCheckBox;
    }

    public JFormattedTextField getPricePerMonthTextField() {
        return pricePerPeriodTextField;
    }

    public JComboBox getPricePerMonthWeightCB() {
        return pricePerPeriodWeightCB;
    }

    public JCheckBox getResponseTimeCheckBox() {
        return responseTimeCheckBox;
    }

    public JFormattedTextField getResponseTimeTextField() {
        return responseTimeTextField;
    }

    public JComboBox getResponseTimeUnitCB() {
        return responseTimeUnitCB;
    }

    public JComboBox getResponseTimeWeightCB() {
        return responseTimeWeightCB;
    }

    public JCheckBox getSignupPrivacyCheckBox() {
        return signupPrivacyCheckBox;
    }

    public JFormattedTextField getSignupPrivacyTextField() {
        return signupPrivacyTextField;
    }

    public JComboBox getSignupPrivacyWeightCB() {
        return signupPrivacyWeightCB;
    }

    public JCheckBox getCapacityCheckBox() {
        return capacityCheckBox;
    }

    public JFormattedTextField getCapacityTextField() {
        return capacityTextField;
    }

    public JComboBox getCapacityUnitCB() {
        return capacityUnitCB;
    }

    public JComboBox getCapacityWeightCB() {
        return capacityWeightCB;
    }

    public JCheckBox getRedundancyCheckBox() {
        return redundancyCheckBox;
    }

    public JFormattedTextField getRedundancyTextField() {
        return redundancyTextField;
    }

    public JComboBox getRedundancyWeightCB() {
        return redundancyWeightCB;
    }

    public JCheckBox getEncryptionCheckBox() {
        return encryptionCheckBox;
    }

    public JFormattedTextField getEncryptionTextField() {
        return encryptionTextField;
    }

    public JComboBox getEncryptionWeightCB() {
        return encryptionWeightCB;
    }

    public List<MatchmakerService> getSelectedServices() {
        return selectedservices;
    }

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        for (int i : searchResultTable.getSelectedRows()) {
            MatchmakerService newService = new MatchmakerService((String) searchResultTable.getModel().getValueAt(i, 0));
            selectedservices.add(newService);
            Nubisave.services.add(newService);
        }
        // adding vertice to the graph view (getParent(), SwingUtilities$SharedOwnerFrame) is now performed in NubisaveEditor
        dispose();
    }//GEN-LAST:event_addBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void throughputWeightCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throughputWeightCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_throughputWeightCBActionPerformed

    private void downTimeWeightCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downTimeWeightCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_downTimeWeightCBActionPerformed

    private void responseTimeWeightCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_responseTimeWeightCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_responseTimeWeightCBActionPerformed

    private void availabilityWeightCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availabilityWeightCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availabilityWeightCBActionPerformed

    private void pricePerPeriodWeightCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pricePerPeriodWeightCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pricePerPeriodWeightCBActionPerformed

    private void encryptionWeightCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptionWeightCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_encryptionWeightCBActionPerformed

    private void pricePerPeriodCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pricePerPeriodCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pricePerPeriodCheckBoxActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        searcher.find(this);
    }//GEN-LAST:event_searchBtnActionPerformed

private void pricePerDataUnitCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pricePerDataUnitCBActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_pricePerDataUnitCBActionPerformed

private void throughputCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throughputCheckBoxActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_throughputCheckBoxActionPerformed

private void signupPrivacyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupPrivacyCheckBoxActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_signupPrivacyCheckBoxActionPerformed

private void capacityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capacityCheckBoxActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_capacityCheckBoxActionPerformed

private void redundancyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redundancyCheckBoxActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_redundancyCheckBoxActionPerformed

private void encryptionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptionCheckBoxActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_encryptionCheckBoxActionPerformed

private void signupPrivacyWeightCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupPrivacyWeightCBActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_signupPrivacyWeightCBActionPerformed

private void capacityWeightCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capacityWeightCBActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_capacityWeightCBActionPerformed

private void signupPrivacyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupPrivacyTextFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_signupPrivacyTextFieldActionPerformed

    private void redundancyWeightCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redundancyWeightCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_redundancyWeightCBActionPerformed

    private void pricePerDataWeightCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pricePerDataWeightCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pricePerDataWeightCBActionPerformed

    private void responseTimeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_responseTimeCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_responseTimeCheckBoxActionPerformed

    private void pricePerDataCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pricePerDataCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pricePerDataCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton addBtn;
    private javax.swing.JCheckBox availabilityCheckBox;
    private javax.swing.JLabel availabilityLabel;
    private javax.swing.JFormattedTextField availabilityTextField;
    private javax.swing.JComboBox availabilityWeightCB;
    private javax.swing.JToggleButton cancelBtn;
    private javax.swing.JCheckBox capacityCheckBox;
    private javax.swing.JFormattedTextField capacityTextField;
    private javax.swing.JComboBox capacityUnitCB;
    private javax.swing.JComboBox capacityWeightCB;
    private javax.swing.JCheckBox downTimeCheckBox;
    private javax.swing.JFormattedTextField downTimeTextField;
    private javax.swing.JComboBox downTimeUnitCB;
    private javax.swing.JComboBox downTimeWeightCB;
    private javax.swing.JCheckBox encryptionCheckBox;
    private javax.swing.JLabel encryptionLabel;
    private javax.swing.JFormattedTextField encryptionTextField;
    private javax.swing.JComboBox encryptionWeightCB;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox pricePerDataCheckBox;
    private javax.swing.JFormattedTextField pricePerDataTextField;
    private javax.swing.JComboBox pricePerDataUnitCB;
    private javax.swing.JComboBox pricePerDataWeightCB;
    private javax.swing.JCheckBox pricePerPeriodCheckBox;
    private javax.swing.JFormattedTextField pricePerPeriodTextField;
    private javax.swing.JComboBox pricePerPeriodWeightCB;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JLabel propertyLabel;
    private javax.swing.JCheckBox redundancyCheckBox;
    private javax.swing.JLabel redundancyLabel;
    private javax.swing.JFormattedTextField redundancyTextField;
    private javax.swing.JComboBox redundancyWeightCB;
    private javax.swing.JCheckBox responseTimeCheckBox;
    private javax.swing.JFormattedTextField responseTimeTextField;
    private javax.swing.JComboBox responseTimeUnitCB;
    private javax.swing.JComboBox responseTimeWeightCB;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTable searchResultTable;
    private javax.swing.JCheckBox signupPrivacyCheckBox;
    private javax.swing.JLabel signupPrivacyLabel;
    private javax.swing.JFormattedTextField signupPrivacyTextField;
    private javax.swing.JComboBox signupPrivacyWeightCB;
    private javax.swing.JCheckBox throughputCheckBox;
    private javax.swing.JFormattedTextField throughputTextField;
    private javax.swing.JComboBox throughputUnitCB;
    private javax.swing.JComboBox throughputWeightCB;
    private javax.swing.JLabel unitLabel;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
