/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on May 24, 2011, 6:20:38 PM
 */
package nubisave.ui;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import javax.swing.JFrame;
import nubisave.*;
import nubisave.component.graph.splitteradaption.NubisaveEditor;

/**
 *
 * @author demo
 */
public class MainWindow extends javax.swing.JFrame {
    //for tray icon
    private Image logo;
    private SystemTray sysTray;
    private PopupMenu menu;
    private MenuItem item_exit;
    private TrayIcon trayIcon;

    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();


        //check to see if system tray is supported on OS.
        if (SystemTray.isSupported()) {
            setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            sysTray = SystemTray.getSystemTray();
            java.net.URL imageURL = this.getClass().getResource("/images/logo.png");
            logo  = Toolkit.getDefaultToolkit().getImage(imageURL);
            menu = new PopupMenu(); //tray icon popup menu
            item_exit = new MenuItem("Exit");
            menu.add(item_exit);
            item_exit.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                   System.exit(0);
               }
            });
            trayIcon = new TrayIcon(logo, "Doubleclick to show. Right click to exit.", menu);
            trayIcon.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                   setVisible(true);
               }
            });
            //add the tray icon to the system tray.
            try {
                sysTray.add(trayIcon);
            }
            catch(AWTException e) {
               System.out.println("System Tray unsupported!");
            }
        }
        NubisaveEditor editor = new NubisaveEditor();
        jTabbedPane1.insertTab("Editor", null, editor, null, 0);
        jTabbedPane1.setSelectedComponent(editor);

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customStorageserviceChooser = new javax.swing.JFileChooser();
        jOptionPane1 = new javax.swing.JOptionPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        optionPanel = new javax.swing.JPanel();
        matchMakerLabel = new javax.swing.JLabel();
        matchMakerURLField = new javax.swing.JTextField();
        changeMatchMakerURLBtn = new javax.swing.JButton();
        matchMakerLabel1 = new javax.swing.JLabel();
        matchMakerField = new javax.swing.JTextField();

        customStorageserviceChooser.setCurrentDirectory(new java.io.File("../splitter/mountscripts"));
        customStorageserviceChooser.setDialogTitle("Custom Service");
        customStorageserviceChooser.setFileFilter(new IniFileFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Nubisave");

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        matchMakerLabel.setText("MatchMaker ");

        matchMakerURLField.setText(Nubisave.properties.getProperty("matchmakerURI"));

        changeMatchMakerURLBtn.setText("Apply");
        changeMatchMakerURLBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeMatchMakerURLBtnActionPerformed(evt);
            }
        });

        matchMakerLabel1.setText("MatchMaker ");

        matchMakerField.setEditable(false);
        matchMakerField.setText("MatchMaker URL");
        matchMakerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchMakerFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionPanelLayout = new javax.swing.GroupLayout(optionPanel);
        optionPanel.setLayout(optionPanelLayout);
        optionPanelLayout.setHorizontalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matchMakerLabel)
                    .addComponent(matchMakerURLField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE))
                .addGap(36, 36, 36)
                .addComponent(changeMatchMakerURLBtn)
                .addGap(48, 48, 48))
        );
        optionPanelLayout.setVerticalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(matchMakerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matchMakerURLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeMatchMakerURLBtn))
                .addContainerGap(489, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Options", optionPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 911, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
}//GEN-LAST:event_jTabbedPane1StateChanged

    private void matchMakerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchMakerFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_matchMakerFieldActionPerformed

    private void changeMatchMakerURLBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeMatchMakerURLBtnActionPerformed
        Nubisave.properties.setProperty("matchmakerURI", matchMakerURLField.getText());
}//GEN-LAST:event_changeMatchMakerURLBtnActionPerformed

    public NubiTableModel tableModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changeMatchMakerURLBtn;
    private javax.swing.JFileChooser customStorageserviceChooser;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField matchMakerField;
    private javax.swing.JLabel matchMakerLabel;
    private javax.swing.JLabel matchMakerLabel1;
    private javax.swing.JTextField matchMakerURLField;
    private javax.swing.JPanel optionPanel;
    // End of variables declaration//GEN-END:variables

    class IniFileFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".ini" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".ini");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "*.ini";
        }
    }

}
