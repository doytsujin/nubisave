/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nubisave.ui;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JTabbedPane;
import nubisave.*;
import nubisave.component.graph.splitteradaption.NubisaveEditor;

/**
 *
 * @author alok
 */
public class NubisaveConfigDlg extends javax.swing.JDialog {

    /**
     * Creates new form NubisaveConfigDlg
     */
    public NubisaveConfigDlg() {
        initComponents();
        mntDirTxtField.setText(Nubisave.mainSplitter.getMountpoint());
        refreshSplitterParameters();
        splitterIsMountedCheckBox.setSelected(Nubisave.mainSplitter.isMounted());
        setInstantTooltipForCodecInfoInvisibleOverlayLabel();
        codecInfoInvisibleOverlayPanel.setVisible(true);
    }
   /**
    * This should instantly show a tooltip with the latest codec information,
    * when hovering over the codecButton that is overlayed with the label codecInfoInvisibleOverlayLabel,
    * to prevent actual user interaction with the button.
    */
    private void setInstantTooltipForCodecInfoInvisibleOverlayLabel(){
        codecInfoInvisibleOverlayLabel.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e)
            {
                try
                {
                    KeyEvent ke = new KeyEvent(e.getComponent(), KeyEvent.KEY_PRESSED,
                        System.currentTimeMillis(), InputEvent.CTRL_MASK,
                        KeyEvent.VK_F1, KeyEvent.CHAR_UNDEFINED);
                    e.getComponent().dispatchEvent(ke);
                }
                catch (Throwable e1)
                {e1.printStackTrace();}
            }
        });
    }
    
    /**
     * Refreshes parameters from the Nubisave Splitter component for display.
     */
    private void refreshSplitterParameters() {
        availabilityLabel.setText("Availability: " + Nubisave.mainSplitter.getAvailability() * 100 + "%");
        availabilityPerYearLabel.setText("Availability per year: " + Nubisave.mainSplitter.getUnavailabilityPerYear());
        redundancyFactorLabel.setText("Redundancy factor: " + Nubisave.mainSplitter.getRedundancyFactor());
        codecInfoInvisibleOverlayLabel.setToolTipText(Nubisave.mainSplitter.getCodecInfo());
    }
    
    private void setIsSplitterMounted() {
        if (Nubisave.mainSplitter.isMounted()) {
            splitterIsMountedCheckBox.setText("Unmount Splitter");
            splitterIsMountedCheckBox.setSelected(true);
        } else {
            splitterIsMountedCheckBox.setText("Mount Splitter");
            splitterIsMountedCheckBox.setSelected(false);
        }
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitterIsMountedCheckBox = new javax.swing.JCheckBox();
        splitterSessionComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        loadSessionButton = new javax.swing.JButton();
        saveSessionButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        mntDirTxtField = new javax.swing.JTextField();
        openMntDirBtn = new javax.swing.JButton();
        desiredAvailabilityLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        matchMakerURLField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        storageStrategyComboBox = new javax.swing.JComboBox();
        availabilityLabel = new javax.swing.JLabel();
        changeMatchMakerURLBtn = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        redundancyFactorLabel = new javax.swing.JLabel();
        availabilityPerYearLabel = new javax.swing.JLabel();
        desiredAvailabilityTextField = new javax.swing.JTextField();
        codecInfoButtonLayeredPane = new javax.swing.JLayeredPane();
        codecInfoInvisibleOverlayPanel = new javax.swing.JPanel();
        codecInfoInvisibleOverlayLabel = new javax.swing.JLabel();
        codecinfoButtonPanel = new javax.swing.JPanel();
        codecInfoButton = new javax.swing.JButton();

        splitterIsMountedCheckBox.setText("Splitter mount status");
        splitterIsMountedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitterIsMountedCheckBoxActionPerformed(evt);
            }
        });

        splitterSessionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", " " }));
        splitterSessionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitterSessionComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose session");

        loadSessionButton.setText("Load Session");
        loadSessionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSessionButtonActionPerformed(evt);
            }
        });

        saveSessionButton.setText("Save Session");
        saveSessionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSessionButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Mount directory");

        mntDirTxtField.setText("jTextField1");
        mntDirTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntDirTxtFieldActionPerformed(evt);
            }
        });

        openMntDirBtn.setText("Open");
        openMntDirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMntDirBtnActionPerformed(evt);
            }
        });

        desiredAvailabilityLabel.setText("Desired Availability:");

        jLabel4.setText("Matchmaker");

        matchMakerURLField.setText(Nubisave.properties.getProperty("matchmakerURI"));
        matchMakerURLField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchMakerURLFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Storage strategy");

        storageStrategyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "UseAllInParallel", "RoundRobin" }));
        storageStrategyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storageStrategyComboBoxActionPerformed(evt);
            }
        });

        availabilityLabel.setText("Availability");

        changeMatchMakerURLBtn.setText("Apply");
        changeMatchMakerURLBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeMatchMakerURLBtnActionPerformed(evt);
            }
        });

        jButton4.setText("Close");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        redundancyFactorLabel.setText("Redundancy factor:");

        availabilityPerYearLabel.setText("Availability per year:");

        desiredAvailabilityTextField.setText("jTextField1");
        desiredAvailabilityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desiredAvailabilityTextFieldActionPerformed(evt);
            }
        });

        codecInfoInvisibleOverlayPanel.setAlignmentX(0.0F);
        codecInfoInvisibleOverlayPanel.setAlignmentY(0.0F);
        codecInfoInvisibleOverlayPanel.setOpaque(false);

        codecInfoInvisibleOverlayLabel.setAlignmentY(0.0F);
        codecInfoInvisibleOverlayLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout codecInfoInvisibleOverlayPanelLayout = new javax.swing.GroupLayout(codecInfoInvisibleOverlayPanel);
        codecInfoInvisibleOverlayPanel.setLayout(codecInfoInvisibleOverlayPanelLayout);
        codecInfoInvisibleOverlayPanelLayout.setHorizontalGroup(
            codecInfoInvisibleOverlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(codecInfoInvisibleOverlayPanelLayout.createSequentialGroup()
                .addComponent(codecInfoInvisibleOverlayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        codecInfoInvisibleOverlayPanelLayout.setVerticalGroup(
            codecInfoInvisibleOverlayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(codecInfoInvisibleOverlayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
        );

        codecinfoButtonPanel.setAlignmentX(0.0F);
        codecinfoButtonPanel.setAlignmentY(0.0F);
        codecinfoButtonPanel.setAutoscrolls(true);
        codecinfoButtonPanel.setOpaque(false);

        codecInfoButton.setText("Codec Information");
        codecInfoButton.setAlignmentY(0.0F);
        codecInfoButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        codecInfoButton.setFocusPainted(false);
        codecInfoButton.setRolloverEnabled(false);
        codecInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codecInfoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout codecinfoButtonPanelLayout = new javax.swing.GroupLayout(codecinfoButtonPanel);
        codecinfoButtonPanel.setLayout(codecinfoButtonPanelLayout);
        codecinfoButtonPanelLayout.setHorizontalGroup(
            codecinfoButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(codecinfoButtonPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(codecInfoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        codecinfoButtonPanelLayout.setVerticalGroup(
            codecinfoButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(codecinfoButtonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(codecInfoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout codecInfoButtonLayeredPaneLayout = new javax.swing.GroupLayout(codecInfoButtonLayeredPane);
        codecInfoButtonLayeredPane.setLayout(codecInfoButtonLayeredPaneLayout);
        codecInfoButtonLayeredPaneLayout.setHorizontalGroup(
            codecInfoButtonLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(codecInfoButtonLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(codecinfoButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(codecInfoButtonLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(codecInfoButtonLayeredPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(codecInfoInvisibleOverlayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(31, Short.MAX_VALUE)))
        );
        codecInfoButtonLayeredPaneLayout.setVerticalGroup(
            codecInfoButtonLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(codecInfoButtonLayeredPaneLayout.createSequentialGroup()
                .addComponent(codecinfoButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
            .addGroup(codecInfoButtonLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(codecInfoButtonLayeredPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(codecInfoInvisibleOverlayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        codecInfoButtonLayeredPane.setLayer(codecInfoInvisibleOverlayPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        codecInfoButtonLayeredPane.setLayer(codecinfoButtonPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(205, 205, 205))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator4)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2)
                                    .addComponent(availabilityLabel)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(mntDirTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(splitterIsMountedCheckBox, javax.swing.GroupLayout.Alignment.LEADING))
                                                .addGap(24, 24, 24)
                                                .addComponent(openMntDirBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(62, 62, 62)
                                                            .addComponent(storageStrategyComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addComponent(matchMakerURLField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(desiredAvailabilityLabel, javax.swing.GroupLayout.Alignment.LEADING))
                                                .addGap(217, 433, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel4)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(desiredAvailabilityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(105, 105, 105)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(redundancyFactorLabel)
                                                            .addComponent(availabilityPerYearLabel))))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(codecInfoButtonLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(242, 242, 242)))
                                        .addGap(29, 29, 29)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(changeMatchMakerURLBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(34, 34, 34))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(splitterSessionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loadSessionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveSessionButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitterIsMountedCheckBox)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mntDirTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openMntDirBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(desiredAvailabilityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(redundancyFactorLabel)
                                .addGap(23, 23, 23)
                                .addComponent(availabilityPerYearLabel))
                            .addComponent(desiredAvailabilityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(codecInfoButtonLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matchMakerURLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeMatchMakerURLBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(storageStrategyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(availabilityLabel)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(splitterSessionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadSessionButton)
                    .addComponent(saveSessionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void splitterIsMountedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitterIsMountedCheckBoxActionPerformed
        // TODO add your handling code here:
        if(!splitterIsMountedCheckBox.isSelected()){ //the selected state is toggled before entering this method
            Nubisave.mainSplitter.unmount();
        } else {
            Nubisave.mainSplitter.mount();
        }
        setIsSplitterMounted();
        refreshSplitterParameters();
    }//GEN-LAST:event_splitterIsMountedCheckBoxActionPerformed

    private void splitterSessionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitterSessionComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_splitterSessionComboBoxActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void mntDirTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntDirTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mntDirTxtFieldActionPerformed

    private void saveSessionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSessionButtonActionPerformed
        // TODO add your handling code here:
        int sessionNumber = Integer.parseInt((String)splitterSessionComboBox.getSelectedItem());
        Nubisave.mainSplitter.storeSession(sessionNumber);
    }//GEN-LAST:event_saveSessionButtonActionPerformed

    private void storageStrategyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storageStrategyComboBoxActionPerformed
        // TODO add your handling code here:
        JComboBox cb = (JComboBox)evt.getSource();
        String storageStrategy = (String)cb.getSelectedItem();
        Nubisave.mainSplitter.setStorageStrategy(storageStrategy);
        refreshSplitterParameters();
    }//GEN-LAST:event_storageStrategyComboBoxActionPerformed

    private void openMntDirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMntDirBtnActionPerformed
        // TODO add your handling code here:
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().open(new File(Nubisave.mainSplitter.getDataDir()));
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);

                // Fallback when desktop handlers are not available
                try {
                    Runtime.getRuntime().exec(new String[]{"xdg-open", Nubisave.mainSplitter.getDataDir()});
                } catch (IOException ex2) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex2);
                }
            }
        }
        
    }//GEN-LAST:event_openMntDirBtnActionPerformed

    private void changeMatchMakerURLBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeMatchMakerURLBtnActionPerformed
        // TODO add your handling code here:
        Nubisave.properties.setProperty("matchmakerURI", matchMakerURLField.getText());
    }//GEN-LAST:event_changeMatchMakerURLBtnActionPerformed

    private void matchMakerURLFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchMakerURLFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_matchMakerURLFieldActionPerformed

    private void loadSessionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSessionButtonActionPerformed
        // TODO add your handling code here:
        int sessionNumber = Integer.parseInt((String)splitterSessionComboBox.getSelectedItem());
        Nubisave.mainSplitter.loadSession(sessionNumber);
        tableModel.fireTableDataChanged();
        storageStrategyComboBox.setSelectedItem(Nubisave.mainSplitter.getStorageStrategy());
    }//GEN-LAST:event_loadSessionButtonActionPerformed

    private void desiredAvailabilityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desiredAvailabilityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_desiredAvailabilityTextFieldActionPerformed

    private void codecInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codecInfoButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codecInfoButtonActionPerformed
    public NubiTableModel tableModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel availabilityLabel;
    private javax.swing.JLabel availabilityPerYearLabel;
    private javax.swing.JButton changeMatchMakerURLBtn;
    private javax.swing.JButton codecInfoButton;
    private javax.swing.JLayeredPane codecInfoButtonLayeredPane;
    private javax.swing.JLabel codecInfoInvisibleOverlayLabel;
    private javax.swing.JPanel codecInfoInvisibleOverlayPanel;
    private javax.swing.JPanel codecinfoButtonPanel;
    private javax.swing.JLabel desiredAvailabilityLabel;
    private javax.swing.JTextField desiredAvailabilityTextField;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JButton loadSessionButton;
    private javax.swing.JTextField matchMakerURLField;
    private javax.swing.JTextField mntDirTxtField;
    private javax.swing.JButton openMntDirBtn;
    private javax.swing.JLabel redundancyFactorLabel;
    private javax.swing.JButton saveSessionButton;
    private javax.swing.JCheckBox splitterIsMountedCheckBox;
    private javax.swing.JComboBox splitterSessionComboBox;
    private javax.swing.JComboBox storageStrategyComboBox;
    // End of variables declaration//GEN-END:variables
}
