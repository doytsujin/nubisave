""" should be used to distinguish between casesensitive files/directories 
i.e. a directory could be appended consisting of a hash and numbers for the upper case letters; pAth/FilE ->path/158HASH/file"""
180 dropbox api, architektur
40 fuse
50 - tests
40 tests
110 tests
120 io_api for dropbox
*** debugged directory creation; fixed problem with missing root "/" in dropbox_io_api
60 debugging path error
20 fixed problem with parsing modified date in test_io_api
20 logging
60 logging, tests 
60 tests
Mi
45 found time difference in test modified times: server time is different to local system	
40 fixed time difference problem but only for get_modified
Do
70 tests - fixed bug in get_directory_listing with return value and storing hash value in hashtable added cache for directory listings
*** reorganizing package structure, playing with git svn, committing to branch dropbox_api
Mo 
60
what happens if there is a system crash and cached data is not yet transfered?
cache decorator pattern vs strategy (caching dict)
Do
40
Fr
40 adding exceptions + tests for dropbox_io_api
*** adding exceptions + tests for dropbox_io_api and trying to refactor test_io_api
50 improved _test_is_dir; made get_metadata private method of dropbox_io_api; removed _test_get_metadat,  adding exceptions + tests for dropbox_io_api
*** got fusex to work
Mo
decorator pattern for caching, logging, path checking
Di
Added method store_fileobject to store interface
Need to add tests for store_fileobject?
So
30
40
Mo
45
Di
25
5
60
24
Mi
120 - xml stuff
70 - xml stuff
18
25
20 get_name, account_info, get_overall_space, get_used_space
34
60
Do
60 Debugging (Namespace problems with file/module names+missing __init__.py in package)
file_get - chunks for dropbox
Fr
***
Sa
*** Added xmlparser + tests
So
60
120
Mo
create* should give error: already exists
10 got _test_create_delete_directory to work
20
150 fixed bug in _parse_collection which now also parses files
Di
30 Fixed Bug in _test_fail_on_is_dir
84 _test_get_directory_listing works, _test_get_modified works, fixed bug in _test_fail_on_get_bytes
15
handle token expiration in /user
copy directory
put error message for failed delete
split delete method into delete_file and delete_folder
Mi
10 fixed bug in _test_duplicate, _test_duplicate works, _test_fail_on_get_bytes works
28 fixed bug in _test_move_directory, fixed bug in duplicate - all tests work! great :D
Do
Need reconnect and for error handling with automatic reconnect
120
60
... integrated SugarSync service with tests and main module
One Week of Nothingness
Do
30 added cache
add get_modified()
add unicode support

Regex for decorator generation from existing interface 
def ([^)]*)(self,? ?)([^)]*)\):\R        raise NotImplementedError\(\)  
def \1\2\3):\R        self.store.\1\3)

make decorators a file subclass -> not possible because the name would be non writable again
implement error handling
implement chaching
implement concurrency
implement metadata:
implement thumbnails
file must not be larger than 300 MB
# hash - Optional. Listing return values include a hash representing the state of the directory's contents. If you provide this argument to the metadata call, you give the service an opportunity to respond with a "304 Not Modified" status code instead of a full (potentially very large) directory listing. This argument is ignored if the specified path is associated with a file or if list=false.
# list - Optional. The strings true and false are valid values. true is the default. If true, this call returns a list of metadata representations for the contents of the directory. If false, this call returns the metadata for the directory itself.
"%a, %d %b %Y %H:%M:%S %Z"
"Sat, 21 Aug 2010 22:31:20 +0000"

Efficiency

   1. Don't recursively troll the metadata to build your directory UI on startup. Instead, only get the directory the user is viewing, and do some caching so you don't have to ask constantly.
   2. Use the hash parameter to metadata with the last hash you had so that you can get a shorter list. What this does is give you a 304 if hash matches, and the contents again if the hash is different from what we have.
   3. Don't download anything until the user has actually asked for it, and then keep it around unless it's been updated. If you keep the hash we give you from the metadata for the file then you can see if you need to get it with another metadata call.

Version Numbers

Remember that <version> is replaced with our API version number, which is currently version 0 (zero). This means that your full URL will be: http://api.dropbox.com/0/oauth/request_token
Error handling

All errors are returned using standard HTTP error code syntax. For example, you should recognize a 404 error means, roughly, that the file you are trying to can't be found. If there is more information, the Dropbox API will include that info in the body of the return call in standard JSON format.
Standard Dropbox errors
507	"User over quota."
503	"too many requests".
5xx	"Server error"
Standard OAuth layer errors
401	Bad or expired token -> simply re-authenticate the user.
403	"wrong consumer token, bad nonce, expired timestamp, ..." fileop forbidden
Standard API layer errors
400	"Bad input parameter"
405	"Request method not expected (generally should be GET or POST)"
/token
400	Lacking mobile authentication permission.
401	Bad or expired token. This can happen if the user or the OAuth provider interrupted or revoked authorization. To fix, simply re-authenticate the user.
406	Too many file entries to return.
411	Length required. This typically returns when you attempt to upload over HTTP using chunked encoding. The Dropbox API currently does not support chunked transfer encoding.
403	A file or folder already exists at the location specified by the path.
 